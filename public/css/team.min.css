.team{padding-bottom:140px;text-align:center}.team__top__text{font-size:18px;line-height:1.5;max-width:900px;margin:70px auto 0;color:#3a3a3c}.team__swiper{margin-top:60px}.team .swiper-wrapper{height:400px!important}.team .swiper-slide{height:340px!important}.team .swiper-scrollbar{background:0 0}.team .swiper-scrollbar-drag{background:#464646;height:2px}.team__item img{height:100%}.team__cta{padding-top:120px;color:#fff}.team__cta__wrapper{background:#026839}.team__cta__container{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.team__cta-elements{padding:70px 0 79px}.team__cta-text{font-size:16px;line-height:1.2;font-weight:700}.team__cta-btn{display:inline-block;padding:8px 25px;border:1px solid #fff;border-radius:5px;margin-top:35px;color:#fff}.team__cta-img{position:relative;width:100%}.team__cta-img img{position:absolute;right:0;bottom:0;min-height:100%;-o-object-fit:cover;object-fit:cover}@media (max-width:991.98px){.team__cta__container{-ms-flex-wrap:wrap;flex-wrap:wrap}.team__cta-elements{margin:0 auto;text-align:center;max-width:50%}.team__cta-text{line-height:1.7}.team__cta-img{margin:0 auto}.team__cta-img img{position:static;display:block;margin:0 auto}}@media (max-width:767.98px){.team__cta-elements{max-width:70%}}@media (max-width:575.98px){.team__cta-elements{width:100%;max-width:unset}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */